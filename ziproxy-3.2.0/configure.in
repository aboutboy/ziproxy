dnl Process this file with autoconf to produce a configure script.
AC_INIT(src/ziproxy.c)
AC_CONFIG_AUX_DIR(config)
AM_INIT_AUTOMAKE(ziproxy, 3.2.0)
AC_PREFIX_DEFAULT(/usr/local)
AM_CONFIG_HEADER(src/config.h)

dnl Checks for programs.
AC_PROG_CC
AM_PROG_CC_C_O
AC_LANG_C

dnl Checks for libraries.
ETR_SOCKET_NSL
LIBS="$LIBS $ETR_SOCKET_LIBS"

dnl zlib
AC_CHECK_LIB(z, gzopen,, AC_MSG_ERROR([ZLib not found.]))

dnl math library
AC_CHECK_LIB(m, pow,, AC_MSG_ERROR([Math library not found.]))

dnl USE_LIB(gif) 
AC_SEARCH_LIBS(DGifSlurp, gif ungif,,
	       AC_SEARCH_LIBS(DGifSlurp, gif ungif, "-L/usr/X11R6/lib -lX11",
	       [AC_MSG_ERROR([Both libgif and libungif not found.])]))

dnl USE_LIB(jpeg)
AC_CHECK_LIB(jpeg, jpeg_start_decompress,, AC_MSG_ERROR([libjpeg not found.]))

dnl USE_LIB(png)
AC_CHECK_LIB(png, png_sig_cmp,, AC_MSG_ERROR([libpng not found.]), -lz -lm)

dnl USE_LIB(pthread)
AC_CHECK_LIB(pthread, pthread_create,, AC_MSG_ERROR([libpthread not found.]), -lpthread)

dnl USE_LIB(cunit1-dev)
#AC_CHECK_LIB(cunit, CU_basic_run_tests,[
#		runtest_LDADD="$LDADD -lcunit"
#	], AC_MSG_ERROR([libcunit not found.]) )

dnl USE_LIB(pngcrush)
dnl AC_CHECK_LIB(pngcrush, png_set_quantize,, AC_MSG_ERROR([libpngcrush not found.]), -lpngcrush)

dnl optional libjasper
AC_ARG_WITH([jasper],
	[AS_HELP_STRING([--with-jasper], [Enable JPEG 2000 support @<:@default=yes@:>@])],
	[],
	[with_jasper=yes])
with_jasper_bool=false
AS_IF([test "x$with_jasper" != xno],
	[AC_CHECK_LIB([jasper], [jas_init],
		[
			AC_CHECK_HEADERS([jasper/jasper.h], [
				LIBS="$LIBS -ljasper"
				AC_DEFINE([JP2K],[1],[JP2K support])
				with_jasper_bool=true
			], AC_MSG_FAILURE([no jasper headers found]))
		],
		AC_MSG_FAILURE([libjasper not found])
	)])
AM_CONDITIONAL(COMPILE_JP2_SUPPORT, $with_jasper_bool)

dnl optional libsasl2
AC_ARG_WITH([sasl2],
	[AS_HELP_STRING([--with-sasl2], [Enable SASL support @<:@default=yes@:>@])],
	[],
	[with_sasl2=yes])
with_sasl2_bool=false
AS_IF([test "x$with_sasl2" != xno],
	[AC_CHECK_LIB([sasl2], [sasl_set_path],
		[
			AC_CHECK_HEADERS([sasl/sasl.h], [
				LIBS="$LIBS -lsasl2"
				AC_DEFINE([SASL],[1],[SASL support])
				with_sasl2_bool=true
			], AC_MSG_FAILURE([no sasl headers found]))
		], AC_MSG_FAILURE([libsasl2 not found])
	)])
AM_CONDITIONAL(COMPILE_SASL_SUPPORT, $with_sasl2_bool)

dnl optional nameservers support
AC_ARG_ENABLE([nameservers],
    AS_HELP_STRING([--enable-nameservers], [Enable Nameservers option support @<:@default=yes@:>@]))
enable_nameservers_bool=false
AS_IF([test "x$enable_nameservers" != xno],
	[
		enable_nameservers_bool=true
		AC_DEFINE([EN_NAMESERVERS],[1],[Nameservers support])
	])
AM_CONDITIONAL(COMPILE_NAMSERVERS_SUPPORT, $enable_nameservers_bool)

AC_ARG_ENABLE([log-reducing], 
	AS_HELP_STRING([--disable-log-reducing], [Disable Log Reducing feature]),
	[if test "$enableval" = yes; then
		AC_DEFINE([LOG_REDUCE], [1], [Define to 1 if you want to reduce log])
	fi],
	[AC_DEFINE([LOG_REDUCE], [1], [Define to 1 if you want to reduce log])]
)

AC_ARG_ENABLE([kill-timeout], 
	AS_HELP_STRING([--disable-kill-timeout], [Disable Killer of timeout process feature]),
	[if test "$enableval" = yes; then
		AC_DEFINE([KILL_TIMEOUT], [1], [Define to 1 if you want to kill timeout process])
	fi],
	[AC_DEFINE([KILL_TIMEOUT], [1], [Define to 1 if you want to kill timeout process])]
)

user_settings=0
AC_ARG_ENABLE([user-settings], 
	AS_HELP_STRING([--disable-user-settings], [Disable User-Custom settings feature]),
	[if test "$enableval" = yes; then
		user_settings=1
		AC_DEFINE([USER_SETTINGS], [1], [Define to 1 if you want to enable user-settings])
	fi],
	[
		user_settings=1
		AC_DEFINE([USER_SETTINGS], [1], [Define to 1 if you want to enable user-settings])
	]
)

if test "$user_settings" = "1"; then
	AC_CHECK_LIB(mysqlclient, mysql_init,, AC_MSG_ERROR([libmysqlclient library not found.])),
	AC_CHECK_LIB(memcached, memcached_create,, AC_MSG_ERROR([libmemcached library not found.])),
	AC_CHECK_LIB(json,json_tokener_parse,,AC_MSG_ERROR([libjson library not found.]))
fi

AC_ARG_ENABLE([debug-details], 
	AS_HELP_STRING([--enable-debug-details], [Enable details debug information]),
	[if test "$enableval" = yes; then
		AC_DEFINE([DEBUG_DETAILS], [1], [Define to 1 if you want to output details info])
	fi]
)
AC_ARG_ENABLE([dump-app-specific-body], 
	AS_HELP_STRING([--enable-dump-app-specific-body], [Enable app dumping functionality]),
	[if test "$enableval" = yes; then
		AC_DEFINE([DUMP_APP_SPECIFIC_BODY], [1], [Define to 1 if you want to dump response body to files])
	fi]
)
AC_ARG_ENABLE([process-tracing], 
	AS_HELP_STRING([--enable-process-tracing], [Enable tracing work process]),
	[if test "$enableval" = yes; then
		AC_DEFINE([TRACE_PROCESS], [1], [Define to 1 if you want to trace work process])
	fi]
)


dnl Checks for header files.
AC_HEADER_STDC
AC_HEADER_SYS_WAIT

dnl Those are all the mandatory headers in *.c and *.h files
AC_CHECK_HEADERS(arpa/inet.h arpa/nameser.h assert.h errno.h fcntl.h getopt.h gif_lib.h grp.h jpeglib.h math.h netdb.h netinet/in.h png.h pthread.h pwd.h resolv.h signal.h stdarg.h stdio.h stdlib.h string.h syslog.h sys/select.h sys/socket.h sys/stat.h sys/time.h sys/types.h sys/wait.h time.h unistd.h zlib.h,,AC_MSG_FAILURE([required header absent]))

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_SIZE_T
AC_HEADER_TIME
AC_STRUCT_TM
AC_CHECK_SIZEOF([int])
AC_CHECK_SIZEOF([long int])
AC_CHECK_SIZEOF([long long int])

dnl Checks for library functions.
AC_FUNC_SETVBUF_REVERSED
AC_TYPE_SIGNAL
AC_FUNC_STRFTIME
AC_FUNC_VPRINTF
AC_CHECK_FUNCS(gettimeofday select socket strdup strstr strtol)
      
AC_ARG_WITH(cfgfile, [  --with-cfgfile=/dir/ziproxy.conf	Set /dir/ziproxy.conf as the default configuration file.],
	    [AC_DEFINE_UNQUOTED(DefaultCfgLocation,["$withval"],[Default configuration file])])

dnl AC_CYGWIN
AC_OUTPUT(Makefile src/Makefile src/tools/Makefile man/Makefile)
